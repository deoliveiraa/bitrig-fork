.\"
.\" Copyright (c) 2014 Andre de Oliveira
.\
.\"	Permission to copy all or part of this material for any purpose is
.\"	granted provided that the above copyright notice and this paragraph
.\"	are duplicated in all copies.  THIS SOFTWARE IS PROVIDED ``AS IS''
.\"	AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT
.\"	LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
.\"	FOR A PARTICULAR PURPOSE.
.\"
.Dd $Mdocdate: December 12 2014 $
.Dt SOURCES 7
.Os
.Sh NAME
.Nm sources
.Nd working with
.Br
sources
.Sh DESCRIPTION
All
.Br
sources are managed using GIT stored at open, well-known and public
repositories on github, for a complete list refer to
.Lk https://github.com/bitrig .
.Pp
Instructions in the following sections assume the below remote source
repositories are available:
.Bl -tag -width Ds
.It The base system repository
.Lk https://github.com/bitrig/bitrig
.It The Ports collection repository
.Lk https://github.com/bitrig/bitrig-ports
.It The X window system repository
.Lk https://github.com/bitrig/bitrig-xenocara
.El
.Pp
Each
.Br
sources repository is organized in branches and tags as follows:
.Pp
.Bl -tag -width master
.It Va master
The branch where active development work is done and will turn into the next
.Em release
of
.Br .
.El
.Bl -tag -width release/X.Y
.It Va release/X.Y
A tag which marks the version of
.Br
as it exists in the signed release distribution.
When a new version of
.Br is released,
.Em master
is tagged and a stable branch is created.
.El
.Bl -tag -width stable/X.Y
.It Va stable/X.Y
The branch created from a release tag,
When important fixes (eg. patches considered critical to security and
reliability) are made to
.Em master ,
they are merged into stable branches, no new features.
.El
.Pp
The letters X and Y are the
major release number
.Ar (X)
and the minor release number
.Ar (Y) .
For instance,
.Br
release 1.0 is tagged as
.Ar release/1.0
and the stable branch is
.Ar stable/1.0 .
.Pp
.Br
uses
.Xr git 1
for source code version control.
.Xr git 1
must be present in the system, since it is installed in the first-boot via
.Xr ports 7
.Pa ( devel/git ) .
.Pp
The remaining of this document is organized as a tutorial to perform the
following actions on
.Br
sources:
.Pp
.Bl -enum -compact -offset indent
.It
Fetching the source code.
.It
Building a new kernel.
.It
Building "userland" ("make build").
.El
.Pp
It is assumed commands below to be run as a user with write permissions on the
source tree directory
.Ns Pa /usr/src
(e.g. a member of wsrc group).
.Pp
For information on how to build a signed release distribution, see
.Xr release 8 .
.Pp
For information on source code style for submitting diffs, refer to
.Xr style 9 .
.Ss 1. Fetching the source code
.Br
does not provides source tarsets (e.g. src.tar.gz, sys.tar.gz), which can be
used to "pre-load" the source tree,
.Xr git 1
is used to pull a copy of the desired source to your local machine for
compilation.
.Pp
To clone the tree, use the following command:
.Bd -literal -offset indent
$ cd /usr && git clone http://github.com/bitrig/bitrig.git src
.Ed
.Pp
Once cloned, a full copy of the remote system's source repository can be found
at
.Ns Pa /usr/src ,
that includes release tags, stable branch, master branch (where development of
stable features are merged to) and all current development branches.
Find below the necessary steps to update the tree at a later time.
.Bl -tag -width Ds
.It Following master
To fetch the most up to date version of the sources in the master branch, use
the command:
.Bd -literal -offset indent
$ cd /usr/src
$ git pull
$ git checkout master
.Ed
.It Following a stable branch
To checkout a stable branch, use the command:
.Bd -literal -offset indent
$ cd /usr/src
$ git pull
$ git checkout stable/X.Y
.Ed
.It Retrieving a release tag
To checkout the sources at the time of a release, use the command:
.Bd -literal -offset indent
$ cd /usr/src
$ git pull
$ git checkout release/X.Y -b release/X.Y
.Ed
.El
.Pp
While the above only show the system's sources (src) tree, same steps are
performed for "xenocara" and "ports".
.Pp
At this point a usable source tree exists at
.Ns Pa /usr/src.
.Ss 2. Building a new kernel
For safety, you should always build and install a new kernel before
building the programs that will use the kernel.
This ensures that any new system calls, for example, will be present
when needed.
.Pp
Change the current working directory to the target architecture, e.g.\&
.Li amd64 .
.Pp
.Dl $ cd /usr/src/sys/arch/amd64/conf
.Pp
Edit the kernel configuration file.
.Va ${NAME}
is your kernel configuration file.
If using
.Li GENERIC
you can skip this step.
And yes, you may use
.Xr vi 1 ,
.Xr mg 1 ,
or any other editor you choose.
.Pp
.Dl $ vi ${NAME}
.Pp
Build the kernel compilation directory and compile the kernel:
.Bd -literal -offset indent
$ config ${NAME}
$ cd ../compile/${NAME}
$ make clean && make
.Ed
.Pp
Replace the old kernel and reboot.
The current kernel is copied to
.Pa /obsd
and the new kernel to
.Pa /bsd .
.Bd -literal -offset indent
$ su
# make install
# shutdown -r now
.Ed
.Pp
If the system does not come up you can boot using
.Pa /obsd .
.Ss 3. Building "userland" ("make build")
After booting the new kernel you can build a new system.
It's safer (but slower) to remove your object directories and re-create
them before the build.
.Pp
Move all your existing object files out of the way and then remove
them in the background:
.Bd -literal -offset indent
$ cd /usr/obj && mkdir -p .old && sudo mv * .old && \e
	sudo rm -rf .old &
.Ed
.Pp
Re-build your obj directories:
.Pp
.Dl # cd /usr/src && make obj
.Pp
Create directories that might be missing:
.Pp
.Dl # cd /usr/src/etc && sudo DESTDIR=/ make distrib-dirs
.Pp
Build the system:
.Pp
.Dl # cd /usr/src && make build
.Pp
When this step is finished, your system is up-to-date and running the newly
compiled binaries.
.Pp
Building
.Br
tree does not modify files in
.Pa /etc ,
.Pa /var
or
.Pa /dev
automatically.
It is up to the administrator to make the necessary modifications there.
To update files in these directories, you might find useful to use
.Xr sysmerge 8 .
To update
.Pa /dev/MAKEDEV ,
refer to upgrade documentation.
.Sh SEE ALSO
.Xr git 1 ,
.Xr release 8
.Rs
.Lk http://git-scm.com/documentation "Git Documentation page"
.Re
.Rs
.Lk http://www.openbsd.org/faq/faq5.html "OpenBSD FAQ 5 - Building the System from Source"
.Re
.Sh HISTORY
This
.Nm
document was originally written by
.An Andre de Oliveira and first appeared in
.Br 1.1 .
